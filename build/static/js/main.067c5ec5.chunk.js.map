{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","a","post","headers","pinata_api_key","process","pinata_secret_api_key","then","res","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","web3","createAlchemyWeb3","default_contract_abi","default_contractAddress","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","getCurrentWalletConnected","length","mintNFT","url","name","description","contractAddress","contractABI","trim","metadata","Object","image","tokenURI","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","multiSender","airdrops","multiSender_1151","default_contract_abi_1151","Minter","props","useState","walletAddress","setWallet","setStatus","active","setActive","setName","setDescription","setURL","setContractAddress","JSON","stringify","setContractABI","airdropLines","setAirdropLines","contractAddress_1151","setContractAddress_1151","contractABI_1151","setContractABI_1151","airdropLines_1151","setAirdropLines_1151","useEffect","on","accounts","rel","connectWalletPressed","walletResponse","onMintPressed","onMultiSendPressed","dealLinesData","split","parse","onMultiSendPressed_1151","dealLinesData_1151","lines_data","forEach","line","recipient","tokenId","push","parseInt","err","amount","id","ConnetWalletFab","color","onClick","String","substring","airdropTabItem","type","width","placeholder","value","onChange","height","className","outlined","block","airdropTabItem1155","flat","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.067c5ec5.chunk.js","sourcesContent":["require('dotenv').config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require('axios')\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n    const url = 'https://api.pinata.cloud/pinning/pinJSONToIPFS'\n    return axios.post(url, JSONBody, {\n        headers: {\n            pinata_api_key: key,\n            pinata_secret_api_key: secret\n        }\n    }).then((res) => {\n        return {\n            success: true,\n            pinataUrl: `https://gateway.pinata.cloud/ipfs/${res.data.IpfsHash}`\n        }\n    }).catch(error => {\n        console.log(error)\n        return {\n            success: false,\n            message: error.message,\n        }\n    })\n}","import { pinJSONToIPFS } from './pinata.js'\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst default_contract_abi = require('../contract-abi.json')\r\nconst default_contractAddress = \"0x6a7115bb32120C67120AD9B62869de859b9fA657\"; // 第3次\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: 'eth_requestAccounts'\r\n            })\r\n            const obj = {\r\n                status: ' connected good.',\r\n                address: addressArray[0],\r\n            }\r\n            return obj\r\n        } catch (err) {\r\n            return {\r\n                address: '',\r\n                status: 'wrong' + err.message,\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            address: '',\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual Ethereum wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_accounts\",\r\n            });\r\n            if (addressArray.length > 0) {\r\n                return {\r\n                    address: addressArray[0],\r\n                    status: \"👆🏽 Good...e.\",\r\n                };\r\n            } else {\r\n                return {\r\n                    address: \"\",\r\n                    status: \"🦊 Connect to Metamask using the top right button.\",\r\n                };\r\n            }\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"😥 \" + err.message,\r\n            };\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual Ethereum wallet, in your\r\n                            browser.\r\n                  </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n}\r\n\r\nexport const mintNFT = async ({url, name, description, contractAddress = default_contractAddress, contractABI = default_contract_abi}) => {\r\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\r\n        return {\r\n            success: false,\r\n            status: \"❗Please make sure all fields are completed before minting.\",\r\n        }\r\n    }\r\n\r\n    // make metadata\r\n    const metadata = new Object()\r\n    metadata.name = name\r\n    metadata.image = url\r\n    metadata.description = description\r\n\r\n    // make pinata call\r\n    const data = await pinJSONToIPFS(metadata)\r\n    if (!data.success) {\r\n        return {\r\n            success: false,\r\n            status: 'sth went wrong while uploading your token-uri'\r\n        }\r\n    }\r\n\r\n    const tokenURI = data.pinataUrl\r\n    // load smart contract\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n\r\n    // setup transaction\r\n    const transactionParameters = {\r\n        to: contractAddress,\r\n        from: window.ethereum.selectedAddress,\r\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI()\r\n    }\r\n\r\n    // sign the transaction via metamask\r\n    try {\r\n        const txHash = await window.ethereum.request({\r\n            method: 'eth_sendTransaction',\r\n            params: [transactionParameters]\r\n        })\r\n        return {\r\n            success: true,\r\n            status: 'check out yhour transaction on ethersacn ropsten. '\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong in transaction: \" + error.message\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const transNFT = async ({ recipient, tokenId, contractAddress = default_contractAddress,  contractABI = default_contract_abi }) => {\r\n    //loadContract();\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n    \r\n    // setup transaction\r\n    const transactionParameters = {\r\n        to: contractAddress,\r\n        from: window.ethereum.selectedAddress,\r\n        'data': window.contract.methods.transNFT(recipient, tokenId).encodeABI()\r\n    }\r\n\r\n    // sign the transaction via metamask\r\n    try {\r\n        const txHash = await window.ethereum.request({\r\n            method: 'eth_sendTransaction',\r\n            params: [transactionParameters]\r\n        })\r\n        return {\r\n            success: true,\r\n            status: 'transNFT ok, check out yhour transaction on ethersacn ropsten. '\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong in transNFT transaction: \" + error.message\r\n        }\r\n    }\r\n}\r\n\r\nexport const multiSender = async ({airdrops, contractAddress = default_contractAddress,  contractABI = default_contract_abi }) => {\r\n    console.log('multiSender: ', airdrops, contractAddress, contractABI)\r\n    //loadContract();\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n    \r\n    // setup transaction\r\n    const transactionParameters = {\r\n        to: contractAddress,\r\n        from: window.ethereum.selectedAddress,\r\n        'data': window.contract.methods.multiSender(airdrops).encodeABI()\r\n    }\r\n\r\n    // sign the transaction via metamask\r\n    try {\r\n        const txHash = await window.ethereum.request({\r\n            method: 'eth_sendTransaction',\r\n            params: [transactionParameters]\r\n        })\r\n        return {\r\n            success: true,\r\n            status: 'multisender ok, check out transaction on ethersacn ropsten. '\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong in multisender transaction: \" + error.message\r\n        }\r\n    }\r\n}\r\n\r\nexport const multiSender_1151 = async ({airdrops, contractAddress = default_contractAddress,  contractABI = default_contract_abi }) => {\r\n    \r\n    //loadContract();\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n    \r\n    // setup transaction\r\n    const transactionParameters = {\r\n        to: contractAddress,\r\n        from: window.ethereum.selectedAddress,\r\n        'data': window.contract.methods.multiSender(airdrops).encodeABI()\r\n    }\r\n\r\n    // sign the transaction via metamask\r\n    try {\r\n        const txHash = await window.ethereum.request({\r\n            method: 'eth_sendTransaction',\r\n            params: [transactionParameters]\r\n        })\r\n        return {\r\n            success: true,\r\n            status: 'multisender ok, check out transaction on ethersacn ropsten. '\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong in multisender transaction: \" + error.message\r\n        }\r\n    }\r\n}","import { useEffect, useState } from \"react\";\r\nimport { Fab, TextField, Button, TextArea, Tabs, Tab, TabItems, TabItem, Card } from 'ui-neumorphism'\r\nimport { connectWallet, getCurrentWalletConnected, mintNFT, transNFT, multiSender, multiSender_1151 } from './utils/interact'\r\nconst default_contract_abi = require('./contract-abi.json')\r\nconst default_contract_abi_1151 = require('./contract-abi_1151.json')\r\n\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [active, setActive] = useState(0);\r\n  const [name, setName] = useState(\"My nft 001\");\r\n  const [description, setDescription] = useState(\"hellow worl.d.\");\r\n  const [url, setURL] = useState(\"QmcAvZhZCWNYtxdfzChKobU6sN2sAGFm5cEZUYv6BQLDiA\");\r\n  const [contractAddress, setContractAddress] = useState(\"0x6a7115bb32120C67120AD9B62869de859b9fA657\");\r\n  const [contractABI, setContractABI] = useState(JSON.stringify(default_contract_abi));\r\n  const [airdropLines, setAirdropLines] = useState(\"0xba0AE2D9412470627d98B417FFD1A423e26e3767, 2 \\n0xCb274cCC5c16Ce5DC5aA2791d81a59b7f775003d, 3\");\r\n\r\n\r\n  const [contractAddress_1151, setContractAddress_1151] = useState(\"0x1f045aafe36444529beef4e37fd662451ed2c6fd\");\r\n  const [contractABI_1151, setContractABI_1151] = useState(JSON.stringify(default_contract_abi_1151));\r\n  const [airdropLines_1151, setAirdropLines_1151] = useState(\"0xba0AE2D9412470627d98B417FFD1A423e26e3767, 1, 2\\n0xCb274cCC5c16Ce5DC5aA2791d81a59b7f775003d,2,3\");\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽change to.\" + accounts[0]);\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  useEffect(async () => { //TODO: implement\r\n    const { address, status } = await getCurrentWalletConnected()\r\n    setWallet(address)\r\n    setStatus(status)\r\n    addWalletListener();\r\n\r\n  }, []);\r\n\r\n  const connectWalletPressed = async () => { //TODO: implement\r\n    const walletResponse = await connectWallet()\r\n    setStatus(walletResponse.status)\r\n    setWallet(walletResponse.address)\r\n  };\r\n\r\n  const onMintPressed = async () => { //TODO: implement\r\n    const { status } = await mintNFT({ url, name, description })\r\n    setStatus(status);\r\n  };\r\n\r\n  const onTransPressed = async () => {\r\n    const recipient = '0xba0AE2D9412470627d98B417FFD1A423e26e3767'  // #2 wallet\r\n    const tokenId = 2\r\n    const { status } = await transNFT({ recipient, tokenId })\r\n    setStatus(status);\r\n  }\r\n\r\n  const onMultiSendPressed = async () => {\r\n    // const lines_data = ['0xba0AE2D9412470627d98B417FFD1A423e26e3767, 2', '0xCb274cCC5c16Ce5DC5aA2791d81a59b7f775003d, 3']\r\n    const airdrops = dealLinesData(airdropLines.split('\\n'))\r\n    console.log('airdrops: ', airdrops)\r\n    const { status } = await multiSender({ airdrops, contractAddress, contractABI: JSON.parse(contractABI) })\r\n    setStatus(status);\r\n  }\r\n\r\n  const onMultiSendPressed_1151 = async () => {\r\n    const airdrops = dealLinesData_1151(airdropLines_1151.split('\\n'))\r\n    const { status } = await multiSender_1151({ airdrops, contractAddress: contractAddress_1151, contractABI: JSON.parse(contractABI_1151) })\r\n    setStatus(status);\r\n  }\r\n\r\n  const dealLinesData = (lines_data) => {\r\n    let airdrops = []\r\n    // deal data\r\n    try {\r\n      lines_data.forEach(line => {\r\n        const [recipient, tokenId] = line.split(',')\r\n        airdrops.push({\r\n          recipient: recipient.trim(),\r\n          tokenId: parseInt(tokenId)\r\n        })\r\n      });\r\n    } catch (err) {\r\n      console.log(\"wrong when deal with the data, please check the example.\")\r\n    }\r\n    return airdrops\r\n  }\r\n\r\n  const dealLinesData_1151 = (lines_data) => {\r\n    let airdrops = []\r\n    try {\r\n      lines_data.forEach(line => {\r\n        const [recipient, tokenId, amount] = line.split(',')\r\n        airdrops.push({\r\n          to: recipient.trim(),\r\n          id: parseInt(tokenId),\r\n          amount: parseInt(amount),\r\n        })\r\n      });\r\n    } catch (err) {\r\n      console.log(\"wrong when deal with the data, please check the example.\")\r\n    }\r\n    return airdrops\r\n  }\r\n\r\n  const ConnetWalletFab = (\r\n    <Fab color='#299ae6' onClick={connectWalletPressed}>\r\n      {walletAddress.length > 0 ? (\r\n        \"🦊Connected: \" +\r\n        String(walletAddress).substring(0, 6) +\r\n        \"...\" +\r\n        String(walletAddress).substring(38)\r\n      ) : (\r\n        <span>Connect Wallet</span>\r\n      )}\r\n    </Fab>\r\n  )\r\n\r\n  const MintTabItem = (\r\n    <TabItem>\r\n      <h2>ERC721</h2>\r\n      <form>\r\n        <p>url of nft token image: </p>\r\n        <TextField\r\n          type=\"text\"\r\n          width={500}\r\n          placeholder=\"e.g. https://your.domain.com/ipfs/<hash>\"\r\n          onChange={(event) => setURL(event.target.value)}\r\n        />\r\n        <p>ntf Name: </p>\r\n        <TextField\r\n          type=\"text\"\r\n          width={500}\r\n          placeholder=\"e.g. My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <p>ntf  Description: </p>\r\n        <TextField\r\n          type=\"text\"\r\n          width={500}\r\n          placeholder=\"e.g. Description... ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <Button color=\"blue\" onClick={onMintPressed}>\r\n        Mint NFT\r\n            </Button>\r\n    </TabItem>\r\n  )\r\n\r\n  const collTabItem = (\r\n    <TabItem>\r\n      none.\r\n    </TabItem>\r\n  )\r\n\r\n  const airdropTabItem = (\r\n    <TabItem>\r\n      <form>\r\n        <p>Contract of the NFT token</p>\r\n        <TextField\r\n          type=\"text\"\r\n          width={800}\r\n          placeholder=\"contract address\"\r\n          value={contractAddress} onChange={({ value }) => setContractAddress(value)}\r\n        />\r\n        <p>ABI of the NFT Contract</p>\r\n        <TextArea\r\n          type=\"text\"\r\n          placeholder=\"contract abi\"\r\n          width={800}\r\n          height={200}\r\n          value={contractABI} onChange={({ value }) => setContractABI(value)}\r\n        />\r\n        <p>Please provide list of recipients</p>\r\n        <TextArea\r\n          type=\"text\"\r\n          width={800}\r\n          height={200}\r\n          placeholder=\"address list and tokenId, see example. \"\r\n          value={airdropLines} onChange={({ value }) => setAirdropLines(value)}\r\n        />\r\n        <p>example:</p>\r\n        <div className=\"example-div\">\r\n          <p> for ERC721(address, id) </p>\r\n          <p>\r\n            0x63Ed7e96CaA84CE8521874d7eE1Ed3bfEA38B316,60\r\n            0x7B32C3158b7f193D3Ea33f5488175C499D492ca2,61\r\n          </p>\r\n        </div>\r\n      </form>\r\n      <br />\r\n      <Button outlined block color=\"blue\" onClick={onMultiSendPressed}>\r\n        multi sender Airdrop\r\n      </Button>\r\n      <br />\r\n\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </TabItem>\r\n  )\r\n\r\n  const airdropTabItem1155 = (\r\n    <TabItem>\r\n      <h2>ERC 1155</h2>\r\n      <form>\r\n        <p>Contract of the NFT token</p>\r\n        <TextField\r\n          type=\"text\"\r\n          width={800}\r\n          placeholder=\"contract address\"\r\n          value={contractAddress_1151} onChange={({ value }) => setContractAddress_1151(value)}\r\n        />\r\n        <p>ABI of the NFT Contract</p>\r\n        <TextArea\r\n          type=\"text\"\r\n          placeholder=\"contract abi\"\r\n          width={800}\r\n          height={200}\r\n          value={contractABI_1151} onChange={({ value }) => setContractABI_1151(value)}\r\n        />\r\n        <p>Please provide list of recipients</p>\r\n        <TextArea\r\n          type=\"text\"\r\n          width={800}\r\n          height={200}\r\n          placeholder=\"address list and tokenId, see example. \"\r\n          value={airdropLines_1151} onChange={({ value }) => setAirdropLines_1151(value)}\r\n        />\r\n        <p>example:</p>\r\n        <div className=\"example-div\">\r\n          <p> for ERC721(address, id, amount) </p>\r\n          <p>\r\n          0xb50cA0C79F9dF405B708b3E517fC99FC12B7AdFB,1,100\r\n          0x57eC2aEFB7bA9237E6a83B03Bb7CecD5C494AcA1,2,95\r\n          </p>\r\n        </div>\r\n      </form>\r\n      <br />\r\n      <Button outlined block color=\"blue\" onClick={onMultiSendPressed_1151}>\r\n        multi sender Airdrop 1151\r\n      </Button>\r\n      <br />\r\n\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </TabItem>\r\n  )\r\n  return (\r\n    <div className=\"main-container\">\r\n      <Card flat className='px-4 fill-width'>\r\n        {ConnetWalletFab}\r\n        <div className=\"title\">\r\n          <h1>NFT multiSender Airdrop</h1>\r\n        </div>\r\n        <Card className='pa-4'>\r\n          <Tabs value={active} onChange={({ active }) => setActive(active)}>\r\n            <Tab>721</Tab>\r\n            <Tab>1151</Tab>\r\n          </Tabs>\r\n          <TabItems value={active} className=\"tab-items\" height={1000}>\r\n            {airdropTabItem}\r\n            {airdropTabItem1155}\r\n          </TabItems>\r\n          </Card>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'ui-neumorphism/dist/index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}